(in-package #:with-c-syntax.stdlib)

(eval-when (:load-toplevel :execute)
(define-preprocessor-macro "and" 'with-c-syntax.core::&&)
(define-preprocessor-macro "and_eq" 'with-c-syntax.core::&=)
(define-preprocessor-macro "bitand" 'with-c-syntax.core::&)
(define-preprocessor-macro "bitor" 'with-c-syntax.core::\|)
(define-preprocessor-macro "compl" 'with-c-syntax.core::~)
(define-preprocessor-macro "not" 'with-c-syntax.core::!)
(define-preprocessor-macro "not_eq" 'with-c-syntax.core::!=)
(define-preprocessor-macro "or" 'with-c-syntax.core::\|\|)
(define-preprocessor-macro "or_eq" 'with-c-syntax.core::\|=)
(define-preprocessor-macro "xor" 'with-c-syntax.core::^)
(define-preprocessor-macro "xor_eq" 'with-c-syntax.core::^=)
)
